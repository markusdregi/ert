language: c

compiler:
  - gcc
  - clang

os:
  - linux
  - osx

osx_image: xcode8.3
sudo: false
dist: trusty

env:
  global:
    - ERT_SHOW_BACKTRACE=1
    - INSTALL_DIR="$(pwd)/install"
    - LD_LIBRARY_PATH="${INSTALL_DIR}/lib:${INSTALL_DIR}/lib64"
    - DYLD_LIBRARY_PATH="${INSTALL_DIR}/lib:${INSTALL_DIR}/lib64"
  matrix:
    - PYTHON_VERSION=2.7
    - PYTHON_VERSION=3.6

matrix:
  fast_finish: true
  exclude:
    - os: osx
      compiler: gcc
    - os: linux
      compiler: clang


addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - george-edison55-precise-backports
    packages:
      - liblapack-dev
      - valgrind
      - gcc-4.8
      - g++-4.8
      - clang
      - cmake
      - cmake-data

before_install:
    - if [[ "$CC" == "gcc" ]]; then export CXX="g++-4.8"; fi

    - if [[ $PYTHON_VERSION == 2.7 ]]; then
        export TRAVIS_PYTHON_VERSION="2.7";
      else
        export TRAVIS_PYTHON_VERSION="3.6";
      fi
    # We do this conditionally because it saves us some downloading if the version is the same.
    - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O miniconda.sh;
        else
          wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
        fi
      else
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          wget https://repo.continuum.io/miniconda/Miniconda3-4.4.10-MacOSX-x86_64.sh -O miniconda.sh;
        else
          wget https://repo.continuum.io/miniconda/Miniconda3-4.4.10-Linux-x86_64.sh -O miniconda.sh;
        fi
      fi

    - bash miniconda.sh -b -p $HOME/miniconda
    - export CONDA_HOME="$HOME/miniconda"
    - export PATH="$CONDA_HOME/bin:$PATH"
    - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        conda create -n ert_env pyqt=4.11.4 --yes;
      else
        conda create -n ert_env pyqt --yes;
      fi
    - source activate ert_env
    - pip install --upgrade -r requirements.txt
    # Checkout libres - need libecl version
    - source .libres_version
    - git clone https://github.com/equinor/libres
    - pushd libres
    - git checkout tags/$LIBRES_VERSION
    - source .libecl_version
    - popd
    - git clone https://github.com/equinor/libecl
    - pushd libecl
    - git checkout tags/$LIBECL_VERSION
    - popd

install:
  # For now we have to make install libecl.
  # Remove when it's possible to pip install
  - bash .build_install.sh libecl
  - bash .build_install.sh libres

script:
  - mkdir build
  - pushd build
  - cmake .. -DBUILD_TESTS=ON
             -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR
             -DCMAKE_PREFIX_PATH=$INSTALL_DIR
             -DCMAKE_C_FLAGS='-Werror=all'
             -DCMAKE_CXX_FLAGS='-Werror -Wno-unused-result'
  - make install
  - ctest --output-on-failure
